const hamburguer=document.querySelector(".hamburguer"),cart=document.querySelector("#cart"),listaCursos=document.querySelector("#lista-cursos"),contenedorCart=document.querySelector("#lista-carrito tbody"),vaciarCartBtn=document.querySelector("#vaciar-carrito");let articulosCarrito=[];function eventListeners(){hamburguer.addEventListener("click",()=>{document.querySelector(".header__barra .nav").classList.toggle("activo")}),listaCursos.addEventListener("click",agregarCurso),cart.addEventListener("click",eliminarCurso),vaciarCartBtn.addEventListener("click",()=>{articulosCarrito=[],cleanHTML()})}function agregarCurso(t){if(t.preventDefault(),t.target.classList.contains("agregar-carrito")){leerDatosCurso(t.target.parentElement.parentElement)}}function leerDatosCurso(t){const r={imagen:t.querySelector(".curso__img").src,titulo:t.querySelector(".curso__nombre").textContent,precio:t.querySelector(".curso__precio").textContent,id:t.querySelector("a").getAttribute("data-id"),cantidad:1},e=articulosCarrito.some(t=>t.id===r.id);if(e){const t=articulosCarrito.map(t=>t.id==r.id?(t.cantidad++,t):t);articulosCarrito=[...t]}e||(articulosCarrito=[...articulosCarrito,r]),shoppingCartHTML()}function eliminarCurso(t){if(t.preventDefault(),t.target.classList.contains("borrar-curso")){const r=t.target.getAttribute("data-id");articulosCarrito=articulosCarrito.filter(t=>t.id!==r),console.log(articulosCarrito),shoppingCartHTML()}}function shoppingCartHTML(){cleanHTML(),articulosCarrito.forEach(t=>{const{imagen:r,titulo:e,precio:a,cantidad:o,id:n}=t,i=document.createElement("tr");i.innerHTML=`\n      <td>\n       <img src="${r}"/>\n      </td>\n      <td>\n        ${e}\n      </td>\n      <td>\n        ${a}\n      </td>\n      <td>\n        ${o}\n      </td>\n      <td>\n        <a href="#" class="borrar-curso" data-id="${n}">X</a>\n      </td>\n      `,contenedorCart.appendChild(i)})}function cleanHTML(){for(;contenedorCart.firstChild;)contenedorCart.removeChild(contenedorCart.firstChild)}document.addEventListener("DOMContentLoaded",eventListeners);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJoYW1idXJndWVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2FydCIsImxpc3RhQ3Vyc29zIiwiY29udGVuZWRvckNhcnQiLCJ2YWNpYXJDYXJ0QnRuIiwiYXJ0aWN1bG9zQ2Fycml0byIsImV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFncmVnYXJDdXJzbyIsImVsaW1pbmFyQ3Vyc28iLCJjbGVhbkhUTUwiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJjb250YWlucyIsImxlZXJEYXRvc0N1cnNvIiwicGFyZW50RWxlbWVudCIsImN1cnNvIiwiaW5mb0N1cnNvIiwiaW1hZ2VuIiwic3JjIiwidGl0dWxvIiwidGV4dENvbnRlbnQiLCJwcmVjaW8iLCJpZCIsImdldEF0dHJpYnV0ZSIsImNhbnRpZGFkIiwiZXhpc3RlIiwic29tZSIsImN1cnNvcyIsIm1hcCIsInNob3BwaW5nQ2FydEhUTUwiLCJjdXJzb0lkIiwiZmlsdGVyIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJyb3ciLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUVBLE1BQU1BLFdBQWFDLFNBQVNDLGNBQWMsZUFFcENDLEtBQU9GLFNBQVNDLGNBQWMsU0FDOUJFLFlBQWNILFNBQVNDLGNBQWMsaUJBQ3JDRyxlQUFpQkosU0FBU0MsY0FBYyx3QkFDeENJLGNBQWdCTCxTQUFTQyxjQUFjLG1CQUM3QyxJQUFJSyxpQkFBbUIsR0FJdkIsU0FBU0MsaUJBRVBSLFdBQVdTLGlCQUFpQixRQUFTLEtBQ3ZCUixTQUFTQyxjQUFjLHVCQUUvQlEsVUFBVUMsT0FBTyxZQU92QlAsWUFBWUssaUJBQWlCLFFBQVNHLGNBSXRDVCxLQUFLTSxpQkFBaUIsUUFBU0ksZUFJL0JQLGNBQWNHLGlCQUFpQixRQUFTLEtBQ3RDRixpQkFBbUIsR0FDbkJPLGNBWUosU0FBU0YsYUFBYUcsR0FHcEIsR0FGQUEsRUFBRUMsaUJBRUVELEVBQUVFLE9BQU9QLFVBQVVRLFNBQVMsbUJBQW9CLENBSWxEQyxlQUgwQkosRUFBRUUsT0FBT0csY0FBY0EsZ0JBV3JELFNBQVNELGVBQWVFLEdBS3RCLE1BQU1DLEVBQVksQ0FDaEJDLE9BQVFGLEVBQU1uQixjQUFjLGVBQWVzQixJQUMzQ0MsT0FBUUosRUFBTW5CLGNBQWMsa0JBQWtCd0IsWUFDOUNDLE9BQVFOLEVBQU1uQixjQUFjLGtCQUFrQndCLFlBQzlDRSxHQUFJUCxFQUFNbkIsY0FBYyxLQUFLMkIsYUFBYSxXQUMxQ0MsU0FBVSxHQU1OQyxFQUFTeEIsaUJBQWlCeUIsS0FBTVgsR0FBVUEsRUFBTU8sS0FBT04sRUFBVU0sSUFHdkUsR0FBSUcsRUFBUSxDQUNWLE1BQU1FLEVBQVMxQixpQkFBaUIyQixJQUFLYixHQUMvQkEsRUFBTU8sSUFBTU4sRUFBVU0sSUFDeEJQLEVBQU1TLFdBR0NULEdBR0FBLEdBR1hkLGlCQUFtQixJQUFJMEIsR0FHcEJGLElBRUh4QixpQkFBbUIsSUFBSUEsaUJBQWtCZSxJQUszQ2EsbUJBU0YsU0FBU3RCLGNBQWNFLEdBR3JCLEdBRkFBLEVBQUVDLGlCQUVFRCxFQUFFRSxPQUFPUCxVQUFVUSxTQUFTLGdCQUFpQixDQUUvQyxNQUFNa0IsRUFBVXJCLEVBQUVFLE9BQU9ZLGFBQWEsV0FHdEN0QixpQkFBbUJBLGlCQUFpQjhCLE9BQVFoQixHQUFVQSxFQUFNTyxLQUFPUSxHQUNuRUUsUUFBUUMsSUFBSWhDLGtCQUNaNEIsb0JBT0osU0FBU0EsbUJBRVByQixZQUlBUCxpQkFBaUJpQyxRQUFTbkIsSUFDeEIsTUFBTUUsT0FBRUEsRUFBTUUsT0FBRUEsRUFBTUUsT0FBRUEsRUFBTUcsU0FBRUEsRUFBUUYsR0FBRUEsR0FBT1AsRUFDM0NvQixFQUFNeEMsU0FBU3lDLGNBQWMsTUFDbkNELEVBQUlFLFVBQVksa0NBRURwQiwwQ0FHVEUsdUNBR0FFLHVDQUdBRyxpRkFHMENGLGdDQUtoRHZCLGVBQWV1QyxZQUFZSCxLQU8vQixTQUFTM0IsWUFHUCxLQUFPVCxlQUFld0MsWUFDcEJ4QyxlQUFleUMsWUFBWXpDLGVBQWV3QyxZQTdKOUM1QyxTQUFTUSxpQkFBaUIsbUJBQW9CRCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWYXJpYWJsZXNcclxuLy8gTmF2XHJcbmNvbnN0IGhhbWJ1cmd1ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuaGFtYnVyZ3VlcmApO1xyXG4vLyBDYXJyaXRvXHJcbmNvbnN0IGNhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjY2FydGApO1xyXG5jb25zdCBsaXN0YUN1cnNvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNsaXN0YS1jdXJzb3NgKTtcclxuY29uc3QgY29udGVuZWRvckNhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjbGlzdGEtY2Fycml0byB0Ym9keWApO1xyXG5jb25zdCB2YWNpYXJDYXJ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI3ZhY2lhci1jYXJyaXRvYCk7XHJcbmxldCBhcnRpY3Vsb3NDYXJyaXRvID0gW107XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGBET01Db250ZW50TG9hZGVkYCwgZXZlbnRMaXN0ZW5lcnMpO1xyXG5cclxuZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgLyogQWwgZGFyIENMSUNLIGVuIGVsIGJvdG9uIGBoYW1idXJndWVyYC4gYWx0ZXJuYSBsYSBjbGFzZSBgYWN0aXZvYCBlbiBlbCBgbmF2YC4gU2UgdXNhIHBhcmEgbW9zdHJhciB5IG9jdWx0YXIgbGEgbmF2Ki9cclxuICBoYW1idXJndWVyLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xyXG4gICAgY29uc3QgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLmhlYWRlcl9fYmFycmEgLm5hdmApO1xyXG5cclxuICAgIG5hdi5jbGFzc0xpc3QudG9nZ2xlKGBhY3Rpdm9gKTtcclxuICB9KTtcclxuXHJcbiAgLy8gRGFyIENMSUNLIGVuIGFncmVnYXIgY2Fycml0byBtYW5kYSBhIGxsYW1hciBhIGxhIGZ1bmNpb24gYWdyZWdhckNhcnJpdG9cclxuXHJcbiAgLyogTGEgbMOtbmVhIGBsaXN0YUN1cnNvcy5hZGRFdmVudExpc3RlbmVyKGBjbGlja2AsIGFncmVnYXJDdXJzbyk7YCBhw7FhZGUgdW4gZXZlbnRvIGVuIGVsIGVsZW1lbnRvXHJcbiBgbGlzdGFDdXJzb3NgLiBEYXIgQ0xJQ0sgZW4gYGxpc3RhQ3Vyc29zYCBsbGFtYSBhIGxhIGZ1bmNpb24gYGFncmVnYXJDdXJzb2AqL1xyXG4gIGxpc3RhQ3Vyc29zLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgYWdyZWdhckN1cnNvKTtcclxuXHJcbiAgLyogTGEgbMOtbmVhIGBjYXJ0LmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgZWxpbWluYXJDdXJzbyk7YCBhw7FhZGUgdW4gZXZlbnRvIGVuIGVsIGVsZW1lbnRvIGBjYXJ0YC4gXHJcbiAgRGFyIENMSUNLIGVuIGBjYXJ0YCwgbGxhbWEgYSBsYSBmdW5jaW9uIGBlbGltaW5hckN1cnNvYC4gKi9cclxuICBjYXJ0LmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgZWxpbWluYXJDdXJzbyk7XHJcblxyXG4gIC8qIEVzdGEgbMOtbmVhIGHDsWFkZSB1biBldmVudG8gYWwgZWxlbWVudG8gdmFjaWFyQ2FydEJ0bmAuIFxyXG4gIERhciBDTElDSyBhIGVzdGUgZWxlbWVudG8gZWplY3V0YSBlbCBjw7NkaWdvIGRlbnRybyBkZSBsYSBhcnJvdyBmdW5jdGlvbiB5IHZhY8OtYSBlbCBjYXJyaXRvKi9cclxuICB2YWNpYXJDYXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKCkgPT4ge1xyXG4gICAgYXJ0aWN1bG9zQ2Fycml0byA9IFtdOyAvLyBSZXNldGVhciBlbCBhcnJlZ2xvXHJcbiAgICBjbGVhbkhUTUwoKTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gRnVuY2lvbmVzXHJcblxyXG4vKipcclxuICogTGEgZnVuY2lvbiBgYWdyZWdhckN1cnNvYCBzZSB1c2EgcGFyYSBhw7FhZGlyIHVuIGN1cnNvIGFsIGNhcnJpdG8gZGUgY29tcHJhcyBjdWFuZG8gc2UgbGUgZGEgQ0xJQ0sgYWwgYm90b24gY29uIGxhIGNsYXNlXHJcbiAqIGBhZ3JlZ2FyLWNhcnJpdG9gLlxyXG4gKiBAcGFyYW0gZSAtIEVsIHBhcmFtZXRybyBgZWAgZXMgdW4gb2JqZXRvIGRlIGV2ZW50byBxdWUgc2UgcGFzYSBhIGxhIGZ1bmNpb24gYGFncmVnYXJDdXJzb2AuXHJcbiAqIE5vcm1hbG1lbnRlIHNlIHVzYSBwYXJhIGFjY2VkZXIgYSBpbmZvcm1hY2nDs24gc29icmUgZWwgZXZlbnRvIHF1ZSBkZXNlbmNhZGVuw7MgbGEgZnVuY2nDs24sIGNvbW8gZWwgZWxlbWVudG8gZGUgZGVzdGlubyBlbiBlbCBxdWUgc2UgaGl6byBDTElDSy4gRW4gZXN0ZSBjYXNvLCBsYSBmdW5jacOzbiBzZSBlc3TDoSB1dGlsaXphbmRvIGNvbW8gdW4gY29udHJvbGFkb3IgZGUgZXZlbnRvcyBwYXJhIHVuIENMSUNLXHJcbiAqL1xyXG5mdW5jdGlvbiBhZ3JlZ2FyQ3Vyc28oZSkge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhgYWdyZWdhci1jYXJyaXRvYCkpIHtcclxuICAgIGNvbnN0IGN1cnNvU2VsZWNjaW9uYWRvID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgLy8gY29uc29sZS5sb2coY3Vyc29TZWxlY2Npb25hZG8pO1xyXG5cclxuICAgIGxlZXJEYXRvc0N1cnNvKGN1cnNvU2VsZWNjaW9uYWRvKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMYSBmdW5jaW9uIGBsZWVyRGF0b3NDdXJzb2AgYcOxYWRlIHVuIGN1cnNvIGFsIGNhcnJpdG8gZGUgY29tcHJhcyB5IGFjdHVhbGl6YSBsYSBjYW50aWRhZCBzaSBlbCBjdXJzbyB5YSBleGlzdGUgZW4gZWwgY2Fycml0by5cclxuICogQHBhcmFtIGN1cnNvIC0gRWwgcGFyYW1ldHJvIGBjdXJzb2AgZXMgdW5hIHJlZmVyZW5jaWEgYSB1biBlbGVtZW50byBIVE1MIHF1ZSByZXByZXNlbnRhIHVuIGN1cnNvLlxyXG4gKi9cclxuZnVuY3Rpb24gbGVlckRhdG9zQ3Vyc28oY3Vyc28pIHtcclxuICAvLyBjb25zb2xlLmxvZyhjdXJzbyk7XHJcblxyXG4gIC8qIENyZWEgdW4gb2JqZXRvIGxsYW1hZG8gYGluZm9DdXJzb2AgcXVlIGNvbnRpZW5lIGluZm9ybWFjacOzbiBzb2JyZSBlbCBjdXJzbyBzZWxlY2Npb25hZG8uIFV0aWxpemEgZWwgbcOpdG9kbyBgcXVlcnlTZWxlY3RvcmAgcGFyYSBzZWxlY2Npb25hciBlbGVtZW50b3MgZXNwZWPDrWZpY29zIGRlbnRybyBkZWwgZWxlbWVudG8gYGN1cnNvXHJcbiAgeSByZWN1cGVyYXIgc3VzIHZhbG9yZXMuICovXHJcbiAgY29uc3QgaW5mb0N1cnNvID0ge1xyXG4gICAgaW1hZ2VuOiBjdXJzby5xdWVyeVNlbGVjdG9yKGAuY3Vyc29fX2ltZ2ApLnNyYyxcclxuICAgIHRpdHVsbzogY3Vyc28ucXVlcnlTZWxlY3RvcihgLmN1cnNvX19ub21icmVgKS50ZXh0Q29udGVudCxcclxuICAgIHByZWNpbzogY3Vyc28ucXVlcnlTZWxlY3RvcihgLmN1cnNvX19wcmVjaW9gKS50ZXh0Q29udGVudCxcclxuICAgIGlkOiBjdXJzby5xdWVyeVNlbGVjdG9yKGBhYCkuZ2V0QXR0cmlidXRlKGBkYXRhLWlkYCksXHJcbiAgICBjYW50aWRhZDogMSxcclxuICB9O1xyXG5cclxuICAvLyBjb25zb2xlLmxvZyhpbmZvQ3Vyc28pO1xyXG5cclxuICAvKiBDb21wcnVlYmEgc2kgdW4gY3Vyc28gZXhpc3RlIGVuIGVsIGNhcnJpdG8uIEl0ZXJhIHNvYnJlIGVsIGFycmF5IGBhcnRpY3Vsb3NDYXJyaXRvYCB5IGNvbXBydWViYSBzaSBhbGfDum4gY3Vyc28gdGllbmUgZWwgbWlzbW8gaWQgcXVlIGVsIGBpbmZvQ3Vyc29gIHF1ZSBzZSBlc3TDoSBhZ3JlZ2Fkby4gU2kgZXhpc3RlIHVuIGN1cnNvIGNvbiBlbCBtaXNtbyBpZCwgbGEgdmFyaWFibGUgYGV4aXN0ZWAgc2Vyw6EgdHJ1ZSwgZGUgbG8gY29udHJhcmlvIHNlcsOhIGZhbHNlLiAqL1xyXG4gIGNvbnN0IGV4aXN0ZSA9IGFydGljdWxvc0NhcnJpdG8uc29tZSgoY3Vyc28pID0+IGN1cnNvLmlkID09PSBpbmZvQ3Vyc28uaWQpO1xyXG5cclxuICAvKiBSZXZpc2Egc2kgZWwgY3Vyc28gc2VsZWNjaW9uYWRvIHlhIGV4aXN0ZSBlbiBlbCBjYXJyaXRvLiBTaSBleGlzdGUsIGluY3JlbWVudGEgbGEgY2FudGlkYWQgZGVsIGN1cnNvIGVuIDEuIFNpIG5vLCBhw7FhZGUgZWwgY3Vyc28gYWwgYXJyYXkgZGVsIGNhcnJpdG8gZGUgY29tcHJhcyBgYXJ0aWN1bG9zQ2Fycml0b2AuICovXHJcbiAgaWYgKGV4aXN0ZSkge1xyXG4gICAgY29uc3QgY3Vyc29zID0gYXJ0aWN1bG9zQ2Fycml0by5tYXAoKGN1cnNvKSA9PiB7XHJcbiAgICAgIGlmIChjdXJzby5pZCA9PSBpbmZvQ3Vyc28uaWQpIHtcclxuICAgICAgICBjdXJzby5jYW50aWRhZCsrO1xyXG5cclxuICAgICAgICAvLyBSZXRvcm5hIGVsIG9iamV0byBhY3R1YWxpemFkb1xyXG4gICAgICAgIHJldHVybiBjdXJzbztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBSZXRvcm5hIGxvcyBubyBkdXBsaWNhZG9zXHJcbiAgICAgICAgcmV0dXJuIGN1cnNvO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGFydGljdWxvc0NhcnJpdG8gPSBbLi4uY3Vyc29zXTtcclxuICB9XHJcblxyXG4gIGlmICghZXhpc3RlKSB7XHJcbiAgICAvLyBBZ3JlZ2EgZWxlbWVudG9zIGFsIGFycmVnbG8gYGFydGljdWxvc0NhcnJpdG9gXHJcbiAgICBhcnRpY3Vsb3NDYXJyaXRvID0gWy4uLmFydGljdWxvc0NhcnJpdG8sIGluZm9DdXJzb107XHJcbiAgfVxyXG5cclxuICAvLyAgIGNvbnNvbGUubG9nKGFydGljdWxvc0NhcnJpdG8pO1xyXG5cclxuICBzaG9wcGluZ0NhcnRIVE1MKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMYSBmdW5jaW9uIGBlbGltaW5hckN1cnNvYCBzZSB1c2EgcGFyYSBlbGltaW5hciB1biBjdXJzbyBkZWwgY2Fycml0byBkZSBjb21wcmFzIGZpbHRyYW5kbyBlbCBjdXJzbyBjb24gZWwgaWQgZXNwZWNpZmljYWRvIGVuIGVsIGFycmVnbG8gYGFydGljdWxvc0NhcnJpdG9gLlxyXG4gKiBAcGFyYW0gZSAtIEVsIHBhcmFtZXRybyBgZWAgZXMgdW4gb2JqZXRvIGRlIGV2ZW50byBxdWUgc2UgcGFzYSBhIGxhIGZ1bmNpw7NuIGBlbGltaW5hckN1cnNvYC4gU2UgdXRpbGl6YSBub3JtYWxtZW50ZSBwYXJhIGFjY2VkZXIgYSBsYSBpbmZvcm1hY2nDs24gc29icmUgZWwgZXZlbnRvIHF1ZSBkZXNlbmNhZGVuw7MgbGEgZnVuY2nDs24sXHJcbiAqIGNvbW8gZWxlbGVtZW50byBvYmpldGl2byBvIGN1YWxxdWllciBkYXRvIGFzb2NpYWRvIGNvbiBlbCBldmVudG8uIEVuIGVzdGUgY2FzbywgbGEgZnVuY2nDs24gdXRpbGl6YSBgZWAgcGFyYVxyXG4gKiBwcmV2ZW5pclxyXG4gKi9cclxuZnVuY3Rpb24gZWxpbWluYXJDdXJzbyhlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGBib3JyYXItY3Vyc29gKSkge1xyXG4gICAgLy8gZS50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgY29uc3QgY3Vyc29JZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShgZGF0YS1pZGApO1xyXG5cclxuICAgIC8vIEVsaW1pbmFyIGRlbCBhcnJlZ2xvIGRlbCBjYXJyaXRvXHJcbiAgICBhcnRpY3Vsb3NDYXJyaXRvID0gYXJ0aWN1bG9zQ2Fycml0by5maWx0ZXIoKGN1cnNvKSA9PiBjdXJzby5pZCAhPT0gY3Vyc29JZCk7XHJcbiAgICBjb25zb2xlLmxvZyhhcnRpY3Vsb3NDYXJyaXRvKTtcclxuICAgIHNob3BwaW5nQ2FydEhUTUwoKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMYSBmdW5jaW9uIGBzaG9wcGluZ0NhcnRIVE1MKClgIGdlbmVyYSBjw7NkaWdvIEhUTUwgcGFyYSBlbCBjYXJyaXRvIGRlIGNvbXByYXMgYmFzYWRvIGVuIGxvcyBlbGVtZW50b3MgZGVsIGFycmF5IGBhcnRpY3Vsb3NDYXJyaXRvYC5cclxuICovXHJcbmZ1bmN0aW9uIHNob3BwaW5nQ2FydEhUTUwoKSB7XHJcbiAgLyogTGEgZnVuY2lvbiBjbGVhbkhUTUwgc2UgZWplY3V0YSBhbnRlcyBkZSBnZW5lcmFyIGVsIEhUTUwgZGVsIGNhcnJpdG8gcGFyYSBsaW1waWFyIGVsIEhUTUwgYW50ZXJpb3IgYW50ZXMgZGUgYcOxYWRpciBlbCBudWV2byBjb250ZW5pZG8uKi9cclxuICBjbGVhbkhUTUwoKTtcclxuXHJcbiAgLy8gUmVjb3JyZSBlbCBjYXJyaXRvIHkgZ2VuZXJhIGVsIEhUTUxcclxuICAvKiBJdGVyYSBzb2JyZSBjYWRhIGVsZW1lbnRvIGRlbCBhcnJheSBgYXJ0aWN1bG9zQ2Fycml0b2AuIGZvckVhY2gsIGVqZWN1dGEgZWwgY8OzZGlnbyBkZW50cm8gZGUgbGEgYXJyb3cgZnVuY3Rpb24uIEVuIGVzdGUgY2FzbyBlc3TDoSBnZW5lcmFuZG8gY8OzZGlnbyBIVE1MIHBhcmEgY2FkYSBlbGVtZW50byBkZWwgY2Fycml0byBkZSBjb21wcmFzIHkgbG8gYcOxYWRlIGFsIGVsZW1lbnRvIGBjb250ZW5lZG9yQ2FydGAuICovXHJcbiAgYXJ0aWN1bG9zQ2Fycml0by5mb3JFYWNoKChjdXJzbykgPT4ge1xyXG4gICAgY29uc3QgeyBpbWFnZW4sIHRpdHVsbywgcHJlY2lvLCBjYW50aWRhZCwgaWQgfSA9IGN1cnNvO1xyXG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChgdHJgKTtcclxuICAgIHJvdy5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDx0ZD5cclxuICAgICAgIDxpbWcgc3JjPVwiJHtpbWFnZW59XCIvPlxyXG4gICAgICA8L3RkPlxyXG4gICAgICA8dGQ+XHJcbiAgICAgICAgJHt0aXR1bG99XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZD5cclxuICAgICAgICAke3ByZWNpb31cclxuICAgICAgPC90ZD5cclxuICAgICAgPHRkPlxyXG4gICAgICAgICR7Y2FudGlkYWR9XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZD5cclxuICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiYm9ycmFyLWN1cnNvXCIgZGF0YS1pZD1cIiR7aWR9XCI+WDwvYT5cclxuICAgICAgPC90ZD5cclxuICAgICAgYDtcclxuXHJcbiAgICAvKiBBw7FhZGUgZWwgaHRtbCBnZW5lcmFkbyBhbCBlbGVtZW50byBgY29udGVuZWRvckNhcnRgLiBTaWduaWZpY2EgcXVlIHNlIGHDsWFkaXLDoSBjb21vIGVsZW1lbnRvIGhpam8gZGUgYGNvbnRlbmVkb3JDYXJ0YCBub3JtYWxtZW50ZSBzZSBhw7FhZGUgY29tbyB1biB0Ym9keSAqL1xyXG4gICAgY29udGVuZWRvckNhcnQuYXBwZW5kQ2hpbGQocm93KTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExhIGZ1bmNpb24gY2xlYW5IVE1MIGVsaW1pbmEgdG9kb3MgbG9zIGVsZW1lbnRvcyBoaWpvIGRlbCBlbGVtZW50byBgY29udGVuZWRvckNhcnRgLlxyXG4gKi9cclxuZnVuY3Rpb24gY2xlYW5IVE1MKCkge1xyXG4gIC8vIEZvcm1hIGxlbnRhXHJcbiAgLy8gY29udGVuZWRvckNhcnQuaW5uZXJIVE1MID0gYGA7XHJcbiAgd2hpbGUgKGNvbnRlbmVkb3JDYXJ0LmZpcnN0Q2hpbGQpIHtcclxuICAgIGNvbnRlbmVkb3JDYXJ0LnJlbW92ZUNoaWxkKGNvbnRlbmVkb3JDYXJ0LmZpcnN0Q2hpbGQpO1xyXG4gIH1cclxufVxyXG4iXX0=
