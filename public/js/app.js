const hamburguer=document.querySelector(".hamburguer"),cart=document.querySelector("#cart"),listaCursos=document.querySelector("#lista-cursos"),contenedorCart=document.querySelector("#lista-carrito tbody"),vaciarCartBtn=document.querySelector("#vaciar-carrito");let articulosCarrito=[];function eventListeners(){hamburguer.addEventListener("click",()=>{document.querySelector(".header__barra .nav").classList.toggle("activo")}),listaCursos.addEventListener("click",agregarCurso),cart.addEventListener("click",eliminarCurso),vaciarCartBtn.addEventListener("click",()=>{articulosCarrito=[],cleanHTML()})}function agregarCurso(t){if(t.preventDefault(),t.target.classList.contains("agregar-carrito")){leerDatosCurso(t.target.parentElement.parentElement)}}function leerDatosCurso(t){const r={imagen:t.querySelector(".curso__img").src,titulo:t.querySelector(".curso__nombre").textContent,precio:t.querySelector(".curso__precio").textContent,id:t.querySelector("a").getAttribute("data-id"),cantidad:1},e=articulosCarrito.some(t=>t.id===r.id);if(e){const t=articulosCarrito.map(t=>t.id==r.id?(t.cantidad++,t):t);articulosCarrito=[...t]}e||(articulosCarrito=[...articulosCarrito,r]),shoppingCartHTML()}function eliminarCurso(t){if(t.preventDefault(),t.target.classList.contains("borrar-curso")){const r=t.target.getAttribute("data-id");articulosCarrito=articulosCarrito.filter(t=>t.id!==r),console.log(articulosCarrito),shoppingCartHTML()}}function shoppingCartHTML(){cleanHTML(),articulosCarrito.forEach(t=>{const{imagen:r,titulo:e,precio:a,cantidad:o,id:n}=t,i=document.createElement("tr");i.innerHTML=`\n      <td>\n       <img src="${r}"/>\n      </td>\n      <td>\n        ${e}\n      </td>\n      <td>\n        ${a}\n      </td>\n      <td>\n        ${o}\n      </td>\n      <td>\n        <a href="#" class="borrar-curso" data-id="${n}">X</a>\n      </td>\n      `,contenedorCart.appendChild(i)})}function cleanHTML(){for(;contenedorCart.firstChild;)contenedorCart.removeChild(contenedorCart.firstChild)}document.addEventListener("DOMContentLoaded",eventListeners);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
